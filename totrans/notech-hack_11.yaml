- en: Chapter 9 Kiosks
  prefs: []
  type: TYPE_NORMAL
- en: Those self-serve electronic terminals are everywhere. They sit there all smug,
    taunting no-tech hackers, just begging to be messed with. And guess what no-tech
    hackers do? Well most of the time, they just look at them. But as you already
    know, hackers don’t see things the way normal people do. When a hacker looks at
    a kiosk, the thing opens up, exposing more than you would ever imagine. But what
    happens when the kiosk is more than a kiosk? What happens when the kiosk holds
    airline passenger information? What if the kiosk holds confidential patient information?
    What if the kiosk holds cash? Do no-tech hackers approach these devices any differently?
    Probably not. After all, the no-touch approach goes a long way. But if a no-tech
    hacker actually decides to touch one of these things, life gets really interesting.
    Then, they might do something really wicked, like hit SHIFT and break into the
    thing.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Kiosk Hacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “An Interactive kiosk is a computer terminal that provides information access
    via electronic methods. Interactive kiosks sometimes resemble telephone booths,
    but can also be used while sitting on a bench or chair.” *http://en.wikipedia.org/wiki/Internet_kiosk.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Kiosks are appearing everywhere these days. No one realizes this more than
    a hacker. Although most people don’t view interactive kiosks as a security threat,
    keep in mind that these are networked data terminals that connect to backend databases
    that store lots of interesting data: names, addresses, phone numbers, social security
    numbers, credit card data, bank information and even medical data. Although most
    hackers only poke at these devices because they’re interesting, malicious no-tech
    hackers may be after more than a few laughs. Let’s take a look at a few kiosks
    through the eyes of a no-tech hacker.'
  prefs: []
  type: TYPE_NORMAL
- en: The next photo shows a typical airport self-check kiosk.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/228-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When I see a machine like this, I ask myself a few questions. I wonder what
    operating system the machine is running. Realizing that the thing is networked,
    I wonder about the type of protocols it uses, and if it’s running TCP/IP, I wonder
    what addresses and ports it uses. After more than ten years of thinking of machines
    as addresses on a network, this is reflex. Finding the answers to these questions
    with traditional methods would require a fair amount of work.
  prefs: []
  type: TYPE_NORMAL
- en: First, I would need to find a place to jack into the kiosk’s network. Then (assuming
    I figured out the network protocols the machine used) I would need to attach a
    machine to the network and start sniffing traffic to see what I could see. If
    the network was quiet, I would have to start scanning the network to try to get
    the machine to respond. Once the kiosk talked to me, I would analyze the results
    to guess the operating system. Once I had nailed all of this information down,
    I could form an attack plan. This would be a boring (I mean typical) approach.
    If I wanted to have more fun, I would attack the kiosk’s inputs. Ignoring the
    on-screen keyboard (which certainly won’t allow me to enter any interesting break
    characters) I would focus on the credit card swipes. I would probably burn some
    nasty one, two, or three-track “credit cards” and swipe them all through the reader
    to try to get the kiosk to gag. If I were feeling all über, I would make my own
    fake passports loaded with wicked data and swipe them through the reader to try
    to break the thing. In order to cover all the bases, I guess I could bring a big
    bag of faked cards and passports and pass them all through (while fending off
    the swarms of TSA agents) knowing that eventually something would bust. Then I
    would smirk from my federal holding cell, knowing that I was *this close* to owning
    an airport kiosk.
  prefs: []
  type: TYPE_NORMAL
- en: Or, I could go no-tech, and keep my eyes open as I went about my everyday—and
    perfectly legal—business. Then, just maybe, I’d see something like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/229-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I would walk up, all casual-like, and snap a few photos like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/230-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And then, I’d know that the kiosk ran some derivative of Windows because only
    DOS uses that ugly font, and DOS don’t network so well, so this was either a command
    shell or a single-user mode. I’d know that it sat on a TCP/IP network and that
    the kiosk used an IP address of 10.160.7.26\. I’d know this was a private network
    because of the reserved “10.” address. I’d also know that the kiosk attached to
    a server at 10.52.20.4 and that it tried to connect on port 402, which IANA says
    is used by the *Genie protocol,* which is used by a product called Altiris. My
    friend Chris Eagle makes the next research step quite elegant—he suggests a “feeling
    lucky” Google search for *“Creating TCP socket for” “on 402”* which confirms that
    the kiosk is running Windows, that it is running Altiris software and that the
    error message is coming from *DOS BootWorks.* I’d know all this without touching
    the machine or the network and without risking any legal unpleasantness. This
    is how no-tech hackers operate.
  prefs: []
  type: TYPE_NORMAL
- en: A no-tech hacker already knows the lowdown on things like the public Internet
    phone in this next photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/231-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A no-tech hacker would know—simply by paying attention—that the high-tech phone
    ran *chkdisk* which hinted at it DOS roots, that it suffered from a bad hard drive
    and exactly which file record segments were bad on the poor device. He or she
    would know all of this because the next photo proves the silly thing coughed up
    a hairball.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/231-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Airport information screens are just as easy to read, especially when they throw
    errors. The next photo reveals a Windows task bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/232-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we discuss in [Chapter 3](B9781597492157000032.htm), each icon has meaning.
    We can tell (among other things) that the terminal runs Windows and that the airport
    relies on Symantec AntiVirus (fifth icon from the left).
  prefs: []
  type: TYPE_NORMAL
- en: Departure boards are equally open to a no-tech hacker’s gaze, as the next photo
    shows.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/232-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screen reveals information about the database that departure information
    is drawn from, the addresses and protocols that are in use, and even that the
    application is completely custom since a Google search for the various diagnostic
    messages reveals absolutely nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Leaving airport terminals alone, let’s take a look at a typical hospital. Even
    when they’re in the hospital, no-tech hackers remain curious. Check out the next
    photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/233-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One look reveals the always-popular Windows operating system, and a couple
    of interesting applications: McKesson PCView (which returns a whopping six Google
    results) and *4dClient* (which smells strongly of Novell). The next photo helps
    complete the picture.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/233-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The big ‘N*‘* suggests a Novell Netware client, along with the McAfee antivirus
    icon, and the icon for Numara’s *Track-It* help desk and asset management software.
    The IP address is also visible. I realize this seems like scanty information,
    but keep in mind that this is all captured without touching a keyboard and without
    leveraging any high-tech attack whatsoever. Each tiny bit of information is a
    freebie that a traditional attacker would have to work for.
  prefs: []
  type: TYPE_NORMAL
- en: The mobile nurse stations at the hospital are even cooler targets. Check it
    out in the next photo. It’s mobile, wireless and irresistible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/234-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even a far-off view shows that the machine’s running Windows, and that Active
    Desktop is enabled. A closer view gets even more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/235-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, looking at the icons, I can tell that the machine’s on a wireless network
    and that the machine’s volume is not muted. Fun. I can see that the machine uses
    USB or PC cards, and that the time is 6:51PM. I can also tell that the IP address
    is 10.1.150.166 and that HOLY CRAP!!!1!1!1! IS THAT A PASSWORD?!? Yes, there on
    that sticker is a username and password to the hospital network. Let me type that
    out in italics for added effect. *A username and password to the hospital network.*
  prefs: []
  type: TYPE_NORMAL
- en: “But there can’t be patient information on that thing,” you might be saying.
    Take a look at the next photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/235-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Yes, I blurred almost the entire picture, but that is the word *charting,* and
    yes, that’s a patient’s chart, chock full of all sorts of sensitive medical information.
    Can you spell HIPAA? I’m not sure this particular hospital can.
  prefs: []
  type: TYPE_NORMAL
- en: Standing around watching an interactive kiosk can get intensely boring. Eventually
    a no-tech hacker is going to want to get … *interactive* with the kiosk. There
    are a total of five keystroke combinations that will pop most kiosks, but we’ll
    only mention one—a combo that doesn’t get mentioned much. A good friend of mine,
    CP, has this wild ability to make machines do crazy things, as these next photos
    reveal. CP took this next photo of an employment kiosk in its natural environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/236-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The designers of this particular machine were pretty smart—they removed most
    of the keys that evil hackers (script kiddies) use to mess the thing up. Even
    still, the *SHIFT* key is there and CP puts it to good use. He taps it five times,
    and the kiosk springs to life with an annoying chirp, thanks to the Windows *sticky
    keys* function. The popup in the next photo signals the beginning of the fun.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/237-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The *sticky keys* popup snaps the kiosk out of kiosk mode and into Windows mode.
    This gives CP access to the *Start* menu and the taskbar, visible in the next
    photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/237-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the Windows session is still very limited, the taskbar reveals an awful
    lot. We can see that the kiosk program is called *Unicru* ([www.kronos.com](http://www.kronos.com)),
    and a Google search shows that it is human resource application software run by
    the likes of Lowe’s, Hollywood Video, Circuit City, Toys R Us, Best Buy, Whole
    Foods and Blockbuster Video. This is interesting because it suggests that this
    sticky keys “attack” will work against their application kiosks as well. The next
    photo shows the right-hand side of the task bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/238-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This photo reveals that the kiosks run VNC servers on addresses owned by the
    Department of Defense Network Information Center. I’m not sure exactly what that
    means. But CP just might have discovered that major retail chains are actually
    under the control of the United States Department of Defense. That explains the
    drill-sergeant attitude of some of the cashiers.
  prefs: []
  type: TYPE_NORMAL
- en: CP has poked at other kiosks as well. This next photo shows a custom kiosk used
    by a national bookstore chain. Unlike the hospital kiosks, this was put in the
    store intentionally for customers to interact with. During slow hours, a low-tech
    hacker could goof around for many minutes without arousing suspicion.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/238-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A few whacks of the *SHIFT* key produces the sticky keys configuration, along
    with other accessibility options as shown in the next photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/239-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The sticky keys “hack” won’t work against every kiosk, but it works against
    quite a few of them, and it’s another shining example of a simple no-tech hack
    that can sidestep modern security restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Real World: ATM Hacking'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E-ticket terminals, employment kiosks, medical records kiosks and the like are
    interesting, but the undisputed king of the kiosk is the Automated Teller Machine
    (ATM). I mean come on—the thing holds *cash.* It’s a natural target for all sorts
    of attackers, the high-tech and no-tech alike. When I saw the scene in the next
    photo, I had to grab a shot.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/240-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The two technicians were so into their work that they hardly noticed me. I snapped
    a few more photos, and eventually the tech in the blue shirt got a call on his
    cell phone and wandered off. Although he remained close to his post, I knew he
    was multitasking and he would be oblivious to the world around him. I took the
    opportunity to move in closer. I stood next to the machine, just out of view of
    the laptop jockey on the other side. I looked down and snapped the next photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/240-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The mess of wires was interesting. I recognized them as standard network cables.
    I recognized the gray device at the bottom of the photo and snapped a better photo
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/241-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Cisco 1700 series router looked decidedly old, but at least it was recognizable.
    I hadn’t done much research into ATM machines, but I had always thought of them
    as really oddball machines that relied on weird hardware and proprietary protocols.
    The network cables suggested that a common protocol (like TCP/IP) was in use,
    and the Cisco router reinforced this. Looking behind the ATM, I saw the network
    wire trailing from the back of the machine and wondered if it always stuck out
    from the machine. That also made me wonder if I could come back later and attach
    my own hub or router and fiddle with the machine. As the blue-shirt finished up
    his phone call and returned to his post, I backed away from the machine. I knew
    I’d never come back to try out my theories about the network cables. I knew where
    that road led, and I had no intention of getting locked up for my curiosity. I
    walked across the hall, keeping my eye on the techs. Blue-shirt opened up the
    front of the cabinet, and his cell phone rang again. He walked away, and I got
    a great shot of the ATM’s innards.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/242-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tucked inside the machine was what looked like a standard PC desktop, lying
    on its side. I knew that I could probably get more information by Googling the
    name of the ATM machine and digging up the manual (yes, that works) but this was
    more fun. I was a visitor in the building (did I mention that I was scheduled
    to give a talk on No-Tech Hacking?) and despite a constant stream of traffic and
    my distinct lack of a visitor’s badge, here I was lurking around taking photos
    of the ATM techs. Googling just wouldn’t have been the same. I snapped a picture
    of blue-shirt’s laptop, all alone on the top of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/243-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I can’t talk too much about what I saw on that screen, or what that little antenna-looking
    thing was on the side of his computer or what the ATM technician used it for,
    because that would be irresponsible. I also can neither confirm nor deny any information
    I may have about how (or if) the technician interacted with the safe inside the
    machine and whether or not he may (or may not have) been susceptible to shoulder
    surfing as he fiddled (or did not fiddle) with the safe. Besides, my target was
    the other guy—he looked like the real techie. I swung to my right, stood behind
    him, and snapped a photo.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](images/244-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I (could have) captured video, too, and (might have) become very familiar with
    the tools, protocols and processes he used (or may not have used) to interact
    with the ATM machine. If I were a bad guy, I might have been well on my way to
    pulling off my first ATM heist, thanks to a good no-tech hacking session. And
    no, I never returned to that ATM. Nor do I plan to.
  prefs: []
  type: TYPE_NORMAL
